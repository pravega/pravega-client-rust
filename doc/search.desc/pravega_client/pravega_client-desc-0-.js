searchState.loadedDescShard("pravega_client", 0, "A Rust client for Pravega.\nThe Byte API for writing and reading data to a segment in …\nFactory to create components in Pravega Rust client.\nThe Event API for writing and reading data.\nThe Index API provides a way to build a monotonic index …\nPravega synchronization primitives.\nA ByteReader enables reading raw bytes from a segment.\nAllow for writing raw bytes directly to a segment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA ByteReader enables reading raw bytes from a segment.\nReturn the bytes that are available to read instantly …\nReturn the head of current readable data in the segment …\nReturn the current read offset.\nReturn the tail offset of the segment asynchronously.\nRead data asynchronously.\nThe seek method for ByteReader allows seeking to a byte …\nAllow for writing raw bytes directly to a segment.\nTrack the current write position for this writer.\nFlush data.\nReset the internal Reactor, making it ready for new …\nSeal the segment and no further writes are allowed.\nSeek to the tail of the segment.\nTruncate data before a given offset for the segment. No …\nWrites the given data to the server asynchronously. It …\nApplications should use ClientFactory to create resources …\nCreate a ReaderGroup with the specified name to read from …\nCreate a Reader Group based on the ReaderGroupConfig.\nCreate a ReaderGroup with the streams configured in the …\nDelete a ReaderGroup.\nDelete a ReaderGroup given for a given scope.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRead events from Stream.\nWrite events exactly once to a given stream.\nA collection of readers that collectively read all the …\nPravega Transaction support.\nWrite events to a stream transactionally.\nDestructor for reader invoked. This will automatically …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis represents an event that was read from a Pravega …\nRead events from Stream.\nThis represents a segment slice which can be used to read …\nThis function returns a SegmentSlice from the data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMethod to verify if the Segment has pending events that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMark the reader as offline after calling the …\nRelease a partially read segment slice back to event …\nRelease a segment back to the reader and also indicate the …\nA collection of readers that collectively read all the …\nSpecifies the ReaderGroupConfig. …\nBuilder used to build the ReaderGroup Config. The reader …\nA set of segment/offset pairs for a single stream that …\nStreamCutVersioned enum contains all versions of StreamCut …\nAdd a Pravega Stream to the reader group which will be …\nBuild a ReaderGroupConfig object. This method panics for …\nCreate a new EventReader under the ReaderGroup. This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMethod to de-serialize the ReaderGroupConfig object from …\nReturn the managed Streams by the ReaderGroup.\ngets a clone of the internal positions\nMethod to obtain the streams and start Streamcut in a …\ngets a clone of the internal scoped stream\nReturn the latest StreamCut in ReaderGroup.\nMethod to obtain the streams in a ReaderGroupConfig.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the readers which are currently online.\nCreate a new ReaderGroupConfig by specifying the group …\nAdd a Pravega Stream to the reader group which will be …\nAdd a Pravega Stream to the reader group which will be …\nAdd a Pravega Stream to the reader group which will be …\nRemoves a reader from the reader group. (Because it is …\nSet reader group refresh time.\nMethod to serialize the ReaderGroupConfig into bytes.\nReaderGroupState encapsulates all readers states.\nAdds a reader to the reader group state.\nAssign an unassigned segment to a given reader\nCompute the number of segments to acquire.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the active readers in a vector.\nReturn the list of all segments.\nReturn the list of segments assigned to the requested …\nget all assigned and unassigned segments to offset map in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>Offset</code>.\nThe client has read to this offset and handle the result …\nRelease a currently assigned segment from the given reader.\nRemove the completed segments and add its successors for …\nPravega Transaction support.\nWrite events to a stream transactionally.\nabort will send abort request to Pravega controller.\nThis method opens a transaction by sending a request to …\ncheck the current Transaction status by sending request to …\ncommit accepts a timestamp and will send a commit request …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis method returns the Transaction based on the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nget the stream that this transaction is based on.\nget the transaction id.\nwrite_event accepts a vec of bytes as the input event and …\nWrite events exactly once to a given stream.\nFlush data.\nWrite an event without routing key.\nWrites an event with a routing key.\nIndex Reader reads the Index Record from Stream.\nIndex Writer writes a fixed size Record to the stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSNAFU context selector for the …\nIndex Reader reads the Index Record from Stream.\nSNAFU context selector for the <code>IndexReaderError::Internal</code> …\nSNAFU context selector for the …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nData in the first readable record.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the readable head offset.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nData in the last record.\nReads records starting from the given offset.\nGiven an Field (name, v), find the offset of the first …\nGet the tail offset.\nIndex Writer writes a fixed size Record to the stream.\nSNAFU context selector for the <code>IndexWriterError::Internal</code> …\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the …\nAppend data with a given Fields.\nAppend data with a given Fields and conditioned on a …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nFlush data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTruncate data to a given offset.\nProvide a map that is synchronized across different …\nTable is the client implementation of Table Segment in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInsert struct is used internally to update the server side …\nThe Key struct in the in memory map. It contains two …\nThe remove struct is used internally to remove a value …\nProvide a map that is synchronized across different …\nThe Update contains a nested map and a version map, which …\nThe Value struct in the in memory map. It contains two …\nClone trait helper.\nThe trait bound for the ValueData\nSerialize trait helper, we need to serialize the ValueData …\nCheck if an inner key exists. The tombstoned value will …\nCheck if an outer_key exists. The tombstoned value will …\nDeserialize the Value into the type T by using cbor …\nFetch the latest map from remote server and apply it to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the Value associated with the map. The data in Value …\nget method will take an outer_key and an inner_key and …\nGet the inner map currently held in memory. The return …\nget_inner_map method will take an outer_key return the …\nGet the Key version of the given key,\nGet the name of the Synchronizer.\nGet the outer map currently held in memory. The return …\nInsert/Update a list of keys and applies it atomically to …\ninsert method needs an outer_key and an inner_key to find …\ninsert_tombstone method replaces the original value with a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove a list of keys and apply it atomically to local map.\nretain a specific map to make sure it’s not altered by …\nSerialize the  into the Vec by using cbor serializer. This …\nTable is the client implementation of Table Segment in …\nReturns the argument unchanged.\nReturn the latest value corresponding to the key.\nReturn the latest values for a given list of keys. If the …\nUnconditionally insert a new or update an existing entry …\nUnconditionally insert a new or updates an existing entry …\nConditionally insert a key-value pair into the table map. …\nConditionally insert key-value pairs into the table. The …\nCalls <code>U::from(self)</code>.\nRead entries as an Async Stream. This method deserialized …\nRead entries as an Async Stream from a given position. …\nRead keys as an Async Stream. This method deserializes the …\nUnconditionally remove a key from the Table. If the key …\nUnconditionally remove the provided keys from the table.\nConditionally remove a key from the Table if it matches …\nConditionally remove keys after checking the key version. …")